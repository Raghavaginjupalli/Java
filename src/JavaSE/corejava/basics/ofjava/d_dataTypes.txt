Data Types:
    Data types specify the type of data that can be stored and manipulated within a program.
    They are divided into "Primitive types" and "Reference types."

1. Primitive Data Types:
    Primitive data types in Java are the most basic data representation. They are not objects, and Java provides
    them to perform operations in a simple and efficient way.

    These are the 8 primitive and basic data types in Java.

    > Numeric Data Types:
     Data Type	        Size	            Default Value	                    Range

        #NOTE: > In java any number without decimal value it is treated as an integer value by default.
               > In Long until integer range, if you don't specify "L" at the end also fine.
               > But if you crass the integer range you must specify the "L" at the end of value.

        byte	    1 byte (8 bits)	             0	                        -128 to 127
        short	    2 bytes (16 bits)	         0	                        -32,768 to 32,767
        int	        4 bytes (32 bits)	         0	                        -2,147,483,648 to 2,147,483,647
        long	    8 bytes (64 bits)	         0L	          -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807


        #NOTE: In java any number with decimal value it is treated as a double value by default.

        float	    4 bytes (32 bits)	         0.0F	                     ±1.4E-45 to ±3.4028235E+38
        double	    8 bytes (64 bits)	         0.0	                     ±4.9E-324 to ±1.7976931348623157E+308

    > Character and Boolean Types:
     Data Type	     Size	                  Default Value	            Range
        char	    2 bytes (16 bits)	        '\u0000'	        0 to 65,535 (Unicode)
        boolean	    1 bit 	                    false	            true or false

2.String data type:
    > String data type in Java is a sequence of characters, but It is a class not a primitive data type.
    > Strings are immutable, meaning once created, its value cannot be changed.
    > If any modification creates a new string object not updating the original one.

    NOTE: String we must declare inside double quotes.  String - "Raghava" , 'Raghava' not a string and syntax error.

    1.String Literals:
        Strings defined using double quotes are stored in the String Pool.

        String str = "Hello, Java!";

    2.new Keyword:
        Strings created with new are stored in the heap memory.

        String str = new String("Hello, Java!");
        # Note: Strings created with new do not reuse objects from the String Pool.


Concatenation:
    It means two combine two strings by using "+".

    (str + 54);                // 54 will converts string. str 54 will print.
    (str + 5 + 4);             // same as "str 54" will print.

    if you want to calculate 5+4, and then concatenate to string do this.
    (str + (5 + 4));           // Then "str 9" will print.

    if no string present, then it will be addition not a concatenation.


********Immutable data type:

    > In java, all primitive and string data types are immutable only, means once created you can't alter/update.
    > If you try to re-assign the value to this, it will create new value, and it will point to new value.
    > original value remain same, you are not alter/update the old value.

    NOTE: In java, any value will not point to variable, Java Garbage Collector will delete those values.



To find the data type storing range (Byte, Short, Int, Long):

    -2^(n-1) to (2^(n-1)) -1)
    # NOTE: "n" is the no of bits.

    For byte data type 8 bits                          For short data type 16 bits
    -2^(8-1)  to (2^(8-1)) -1                          -2^(16-1)  to (2^(16-1)) -1

    byte = -128 to 127                                 int = -32,768 to 32,767


DataType stores other data type:

    # NOTE: > floating point values can't store in integer values in implicitly.
            > if we want to store we must go for type casting, may lead data loss.

            narrow to wider ---> auto type conversation, not data loss.
            wider to narrow ---> explicit type casting, may lead data loss.

    byte   > only byte
    short  > byte and short
    int    > byte, short and int
    long   > byte, short, int and long

    float  > float, byte, short, int and long
    Double > double, float, byte, short, int and long



