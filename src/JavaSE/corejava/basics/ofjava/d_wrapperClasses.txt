Wrapper classes:

    > Wrapper classes in Java are object representations of primitive data types.
    > They "wrap" the primitive data types in an object, Every primitive data type has its own wrapper class.
    > By using wrapper class we can provide several utility methods for the primitive data types.

    Byte:

            Method	                            Description
     Byte.valueOf(String s)	            Converts a String to a Byte.
     Byte.valueOf(byte b)	            Converts a byte to a Byte.
     byteValue()	                    Returns the value as a byte.
     byte maxByte = Byte.MAX_VALUE;    Give Max value can take the byte wrapper class
     byte minByte = Byte.MIN_VALUE;    Give Min value can take the byte wrapper class


    Short:

            Method	                            Description
     Short.valueOf(String s)	        Converts a String to a Short.
     Short.valueOf(short s)	            Converts a short to a Short.
     shortValue()	                    Returns the value as a short.
     short maxShort = Short.MAX_VALUE;  Give Max value can take the Short wrapper class
     short minShort = Short.MIN_VALUE;  Give Min value can take the Short wrapper class

    Integer:

            Method	                            Description
     Integer.valueOf(String s)	        Converts a String to an Integer.
     Integer.valueOf(int i)	            Converts an int to an Integer.
     parseInt(String s)	                Parses a String into an int.
     toBinaryString(int i)	            Converts an int to its binary representation as a String.
     toHexString(int i)	                Converts an int to its hexadecimal representation as a String.
     toOctalString(int i)	            Converts an int to its octal representation as a String.
     intValue()	                        Returns the value as an int.
     int maxInt = Integer.MAX_VALUE;    Give Max value can take the int wrapper class
     int minInt = Integer.MIN_VALUE;    Give Min value can take the int wrapper class

    Long:

            Method	                            Description
     Long.valueOf(String s)	            Converts String to Long.
     Long.valueOf(long l)	            Converts long to Long.
     parseLong(String s)	            Parses String into long.
     toBinaryString(long l)	            Converts long to its binary representation as a String.
     toHexString(long l)	            Converts long to its hexadecimal representation as a String.
     longValue()	                    Returns the value as long.
     long maxLong = Long.MAX_VALUE;     Give Max value can take the long wrapper class
     long minLong = Long.MIN_VALUE;     Give Min value can take the long wrapper class

    Float:

             Method	                            Description
     Float.valueOf(String s)	        Converts a String to a Float.
     Float.valueOf(float f)	            Converts a float to a Float.
     parseFloat(String s)	            Parses a String into a float.
     isNaN()	                        Checks if the value is "Not a Number" (NaN).
     isInfinite()	                    Checks if the value is infinite.
     floatValue()	                    Returns the value as a float.
     float maxFloat = Float.MAX_VALUE;
     float minFloat = Float.MIN_VALUE;

    Double:

             Method	                            Description
     Double.valueOf(String s)	        Converts a String to a Double.
     Double.valueOf(double d)	        Converts a double to a Double.
     parseDouble(String s)	            Parses a String into a double.
     isNaN()	                        Checks if the value is "Not a Number" (NaN).
     isInfinite()	                    Checks if the value is infinite.
     doubleValue()	                    Returns the value as a double.
     double maxDouble = Double.MAX_VALUE;
     double minDouble = Double.MIN_VALUE;

    Character:

              Method	                        Description
     Character.isDigit(char ch)	        Checks if the character is a digit.
     Character.isLetter(char ch)	    Checks if the character is a letter.
     Character.isWhitespace(char ch)	Checks if the character is a whitespace character.
     Character.toUpperCase(char ch)	    Converts a character to uppercase.
     Character.toLowerCase(char ch)	    Converts a character to lowercase.


    Boolean:

                Method	                         Description
     Boolean.valueOf(String s)	        Converts a String to a Boolean object.
     Boolean.parseBoolean(String s)     Parses a String into a boolean.
     booleanValue()	                    Returns the value as a boolean.


Object reuse(wrapper classes):
    In wrapper class of (integer, character) provides object reuse at some range.

    Integer: Caches values from -128 to 127.
    Character: Caches values from 0 to 127 (the ASCII range).

    Autoboxing:
        When you assign a primitive value to the corresponding wrapper class (Integer or Character),
        Java automatically creates the wrapper object for you through autoboxing.

    Caching:
        For values within the caching range, the JVM reuses the object from a pool, improving memory efficiency.
        When values are outside of these ranges, new objects are created each time.


Object reuse(String):
    In Java, Strings defined using literals are automatically added to the String Pool, even if it's large string also.
    This optimization ensures that String literals are shared, reducing memory usage and improving performance.

    When you create a String literal ( String str = "Hello, Java!";):
        If a matching String object already exists in the pool, the JVM reuses that object.
        If no matching String is found, the JVM adds the new String object to the pool.