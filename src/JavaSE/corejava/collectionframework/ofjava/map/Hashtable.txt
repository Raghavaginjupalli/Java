** Map(Interface): map is an interface, collection is not a root for map interface, instead collection & Map are same level.
    If we want to represent a group of individual objects as key value pairs where duplicates keys are not allowed
    but values can be duplicated then we should go for Map.
            |
            ├── HashTable (Class)
            |
            ├── HashMap (Class)
            |     |
            |     └── LinkedHashMap (Class)
            |
            └── SortedMap (Interface)
                   |
                   └── TreeMap (Class)


HashTable:
    > The underlying data structure is HashTable only.
    > All objects are inserted base on Hashcode of keys, but insertion order also not preserved.
    > The duplicate keys are not allowed, but may insert duplicate values.
    > Each key-value pair is called entry, hence map is consider as a collection of entry objects.
    > Heterogeneous objects are allowed for key and values.
    > Null is not applicable for key and values.
    > HashTable is implemented by Serializable(I) and cloneable(I), but not RandomAccess(I).
    > The Search operation give better performance, due to Hashcode.
    > HashTable is Synchronized, hence for Thread safe.


Data Structure:
    > Initially ArrayList create with default size of 11, then it grow the size.
    > If default fill ration (Fill ration = 0.75) exceeds, it creates double size of current size.

    ┌----┬----┬----┬----┬----┬----┬----┬----┬----┬----┬----┐
    |    |    |    |    |    |    |    |    |    |    |    |
    └----┴----┴----┴----┴----┴----┴----┴----┴----┴----┴----┘
       0    1   2     3    4    5    6    7    8   9    10


    Constructors:
        1- HashTable h = new HashTable();

            > default size of HashTable is 11 with (fill ration - 0.75), If default fill ration exceeds,
              it creates double size of current size.
            > Fill ration means, 75 % current size object filling means (11 * .75 = 8).
            > So if the set exceeds 8, then double the current size will create. same process next exceeds also.
            > when new HashTable is created, the old HashTable values are copied to new HashTable,
              and old will take care of Garbage Collector.
            > by copying old HashTable to new HashTable, it will take time, so it will give less performance.

        2- HashTable h = new HashTable(int initial capacity);

            > If you know the approximate size then you can specify the initial size with fill ratio (75%) of HashMap.
            > If default fill ration exceeds, it creates double size of current size.
            > by using this we can get some performance improved than first Constructor.

        3- HashTable h = new HashTable(int initial capacity, float fill ratio);

            > If you know the approximate size then you can specify the initial size with specified fill ratio of HashTable.
            > If specified fill ration exceeds, it creates double size of current size.
            > by using this we can get some performance improved than first Constructor.

        3- HashTable h = new HashTable(Map m);

            > by using this constructor we can convert any Map object to HashTable method.