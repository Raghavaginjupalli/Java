Inversion of Control (IoC) in Java:
	> IoC is a design principle in software development where the control of creating and managing objects 
	(and their dependencies) is transferred from the developers (application code) to a framework or container. 
	> This principle allows developers to focus on defining the logic of the program while delegating control 
	  responsibilities to an external entity.
	
IoC Container:
	> In Spring, the IoC (Inversion of Control) container is the core of the framework and is responsible for 
	  managing the lifecycle and configuration of beans. It achieves this by using dependency injection (DI). 
	> You can create an IoC container in Spring by instantiating one of its ApplicationContext implementations or BeanFactory implementations.
	

	
							BeanFactory(Interface)
									 |
			 XmlBeanFactory (Class)--├── ApplicationContext(Interface)
												|
												├── ClassPathXmlApplicationContext (Class)
												|
												├── FileSystemXmlApplicationContext (Class)
												|
												└── AnnotationConfigApplicationContext (Class)
	 
	NOTE : BeanFactory is deprecated, So every modren Application is used "ApplicationContext"!
		 
	Two ways to create the IoC Container:	 
		 
	1. Using BeanFactory:
		The BeanFactory is a simpler, lightweight alternative to ApplicationContext. 
		It is rarely used in modern applications because it lacks advanced features like AOP, event propagation, and internationalization.
		
		1- XML based:
			// Create the IoC container
			BeanFactory factory = new XmlBeanFactory(new ClassPathResource("beans.xml"));

			// Retrieve the bean
			Car car = factory.getBean("car", Car.class);
	
	2. Using ApplicationContext:
		The ApplicationContext is the most common way to create an IoC container in Spring. 
		It provides advanced features such as event handling, internationalization, and AOP.
		
		Steps to Create an IoC Container Using ApplicationContext:
			> Define beans in a configuration file XML or Java-based or use annotations.
			> Instantiate the ApplicationContext.
			
			1- XML based:
				// Create the IoC container
				ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");

				// Retrieve the bean
				Car car = context.getBean("car", Car.class);
			
			2-Java-based:
				// Create the IoC container
				ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);

				// Retrieve the bean
				Car car = context.getBean(Car.class);
			
	
				
			
******************************* Comparison Between BeanFactory and ApplicationContext ****************************************	

			+----------------------------------+---------------------+---------------------+
			|          Feature                 |     BeanFactory     | ApplicationContext  |
			+----------------------------------+---------------------+---------------------+
			| Eager Initialization             |          No         |         Yes         |
			+----------------------------------+---------------------+---------------------+
			| Event Handling                   |          No         |         Yes         |
			+----------------------------------+---------------------+---------------------+
			| Annotation Support               |       Limited       |         Full        |
			+----------------------------------+---------------------+---------------------+
			| AOP (Aspect-Oriented Programming)|          No         |         Yes         |
			+----------------------------------+---------------------+---------------------+
			| Internationalization             |          No         |         Yes         |
			+----------------------------------+---------------------+---------------------+
			| Recommended for Modern Apps      |          No         |         Yes         |
			+----------------------------------+---------------------+---------------------+





Dependency Injection:
	Dependency injection is a design pattern that allows a class to receive its dependencies from 
	external sources rather than creating them internally. This promotes loose coupling and easier testing.

	Manual Dependency Injection:
		> In manual dependency injection, you explicitly pass the required dependencies to a class, 
		  typically through its constructor or setter methods. 
		> This approach doesn't rely on any external frameworks and can be implemented using core Java.
		
	
	Spring for Dependency Injection (Automated):

		Automated Object Management: 
			> Spring's Inversion of Control (IoC) container automatically manages the creation and lifecycle of beans (objects), 
			  reducing boilerplate code and potential errors associated with manual object creation. 

		Flexible Configuration: 
			> Spring allows for configuration through XML files, annotations, or Java-based configuration, 
			  providing flexibility in how dependencies are defined and injected. 

		Loose Coupling: 
			> By promoting programming to interfaces and using DI, Spring helps in achieving loose coupling between components, 
			  making the system more modular and easier to test. 

		Scope and Lifecycle Management: 
			> Spring provides built-in support for different bean scopes (singleton, prototype, etc.) 
			  and lifecycle callbacks, allowing fine-grained control over bean behavior. 


		Integration with Other Frameworks: 
			> Spring seamlessly integrates with various frameworks and technologies, simplifying tasks like 
			  transaction management, security, and data access. 
			  
			  
			  
			  
******************************  Manual Dependency Injection and Spring Dependency Injection  **************************************************	

		  
				+--------------------------------------+---------------------------------------------+
				|            Manual DI                 |           Spring DI                         |
				+--------------------------------------+---------------------------------------------+
				| **Object Creation**                  | Spring's IoC container handles object       |
				| Developers manually create objects   | creation and dependency injection, reducing |
				| and manage their dependencies.       | boilerplate code.                           |
				+--------------------------------------+---------------------------------------------+
				| **Configuration Management**         | Spring offers flexible configuration        |
				| Explicit coding required for         | (XML, annotations, Java-based), making it   |
				| object relationships and dependencies. | easier to manage dependencies.            |
				+--------------------------------------+---------------------------------------------+
				| **Flexibility and Scalability**      | Spring is designed for scaling and adapting |
				| Can be error-prone and harder to     | to changes, especially in complex           |
				| scale in large applications.         | applications.                               |
				+--------------------------------------+---------------------------------------------+
				| **Testing and Mocking**              | Supports injecting mock objects easily for  |
				| Developers handle testing manually.  | unit testing.                               |
				+--------------------------------------+---------------------------------------------+
				| **Learning Curve**                   | Easier to start but lacks advanced          |
				| Simple for small applications.       | features; Spring has a steeper learning     |
				|                                      | curve but offers powerful tools.            |
				+--------------------------------------+---------------------------------------------+
				| **Integration and Features**         | Limited to developer's implementation.      |
				| Lacks built-in advanced features.    | Provides features like AOP, transaction     |
				|                                      | management, and more.                       |
				+--------------------------------------+---------------------------------------------+
				| **Performance Considerations**       | Optimizations depend on developer's         |
				| Manual lifecycle management can      | efforts. Spring efficiently manages         |
				| lead to inefficiencies.              | object lifecycles, though with slight       |
				|                                      | overhead.                                   |
				+--------------------------------------+---------------------------------------------+
				| **Community and Support**            | Relies on general programming resources.    |
				| No dedicated framework support.      | Strong community, extensive documentation,  |
				|                                      | and robust support.                         |
				+--------------------------------------+---------------------------------------------+

