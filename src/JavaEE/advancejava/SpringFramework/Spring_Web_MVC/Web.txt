
1- Controller Annotations:
	These annotations are used to define controllers and handle HTTP requests.

	> @Controller
		Marks a class as a Spring MVC controller.
		Typically used for rendering views (e.g., HTML, Thymeleaf).

	> @RestController
		A specialized version of @Controller that combines @Controller and @ResponseBody.
		Used for REST APIs, where responses are returned as JSON or XML.

	> @RequestMapping
		Maps HTTP requests to specific handler methods or classes.
		Can specify HTTP methods, URL paths, headers, and parameters.
		
	> @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, @PatchMapping
		Specialized versions of @RequestMapping for specific HTTP methods.

2. Method-Level Annotations
	These annotations are used to customize the behavior of controller methods.

	@ResponseBody
		Indicates that the return value of a method should be serialized to the response body (e.g., JSON).

	@RequestBody
		Maps the HTTP request body to a method parameter (e.g., for JSON input).

	@PathVariable
		Binds a URI template variable to a method parameter.
		Example: /users/{id} -> @PathVariable("id").

	@RequestParam
		Binds a query parameter or form data to a method parameter.
		Example: /search?query=abc -> @RequestParam("query").

	@ModelAttribute
		Binds form data or query parameters to a model object.
		Useful for populating objects in forms.

	@RequestHeader
		Binds HTTP header values to a method parameter.
	
	@CookieValue
		Binds cookie values to a method parameter.

3. Exception Handling Annotations
	These annotations help handle exceptions globally or locally in controllers.

	@ExceptionHandler
		Maps a specific exception to a handler method within a controller.
	
	@ControllerAdvice
		Global exception handler across all controllers.
	
	@ResponseStatus
		Marks a method or exception class with a specific HTTP status code.


5. Cross-Origin Resource Sharing (CORS)
	Used to configure cross-origin requests.

	@CrossOrigin
		Enables CORS for specific methods or controllers.